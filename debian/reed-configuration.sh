# BB Project Environment Installation

## OS
```bash
#! /bin/bash
# vim
cat << EOF > /root/.selected_editor
# Generated by /usr/bin/select-editor
SELECTED_EDITOR="/usr/bin/vim.basic"
EOF

cat << EOF > /root/.vimrc
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
EOF

# alias
cat << EOF > /etc/profile.d/base.sh
# alias
alias ls='ls --color=auto'
alias ll='ls -lh --color=auto'
alias la='ls -lah --color=auto'
EOF

# open file limits
cat << EOF > /etc/security/limits.d/base.conf
* - nproc 1048576
* - nofile 1048576
root - nproc 1048576
root - nofile 1048576
appuser - nproc 1048576
appuser - nofile 1048576
EOF

# install packages
apt -y install sudo resolvconf locales systemd-timesyncd
apt -y install vim tcpdump psmisc net-tools sysstat dstat lrzsz tmux htop curl p7zip rsync lsof tree

# set timezone (/etc/timeozne)
timedatectl set-ntp true
timedatectl set-timezone Asia/Phnom_Penh
dpkg-reconfigure -f noninteractive tzdata

# logrotate
if [ `grep -Ec '^dateext' /etc/logrotate.conf` -eq 0 ]; then
    if [ `grep -Ec '#dateext' /etc/logrotate.conf` -eq 1 ]; then
        sed -i 's/#dateext/dateext/g' /etc/logrotate.conf
    else
        sed -i '/# uncomment/i\# use date as a suffix of the rotated file\ndateext\n' /etc/logrotate.conf
    fi
    systemctl restart logrotate
fi

# crontab
(crontab -l ; cat /dev/null ) | crontab -
systemctl restart cron

# sudo
cat << EOF > /etc/sudoers.d/user_sudoers
%sudo ALL=(ALL:ALL) NOPASSWD:ALL
EOF

# add user op
[ `grep -c op /etc/passwd ` -eq 0 ] && /usr/sbin/useradd -G sudo -m -s /bin/bash op
[ `grep sudo /etc/group | grep -c op` -eq 0 ] && /usr/sbin/usermod -G sudo op

=> id -u op >/dev/null 2>&1 || /usr/sbin/useradd -m -s /bin/bash op && usermod -aG sudo op

useradd -m -s /bin/bash

#Create appuser
[ `grep -c appuser /etc/passwd ` -eq 0 ] && /usr/sbin/useradd -r -d /nonexistent -s /usr/sbin/nologin -c "app runner" appuser


## user vim configuration
cat << EOF > /home/op/.selected_editor
# Generated by /usr/bin/select-editor
SELECTED_EDITOR="/usr/bin/vim.basic"
EOF

cat << EOF > /home/op/.vimrc
set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4
EOF

chown op:op /home/op/{.selected_editor,.vimrc}


ssh-keygen -a 100 -t ed25519 -C "bb@localhost"

## inject ssh keysvim
mkdir /home/op/.ssh/
cat << EOF > /home/op/.ssh/authorized_keys
ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIMk08Xpy7DofT1hoRtfIKgsoDtuEcpRzQ6/XbhKHLRls bb@localhost
EOF

chmod 700 /home/op/.ssh/
chmod 600 /home/op/.ssh/authorized_keys
chown -R op:op /home/op/.ssh/
```

## Angie
> a fork of nginx
```bash
# add apt repo
apt-get install -y ca-certificates curl

curl -o /etc/apt/trusted.gpg.d/angie-signing.gpg \
            https://angie.software/keys/angie-signing.gpg

echo "deb https://download.angie.software/angie/$(. /etc/os-release && echo "$ID/$VERSION_ID $VERSION_CODENAME") main" \
    | sudo tee /etc/apt/sources.list.d/angie.list > /dev/null




apt update

# install angie
apt-get install -y angie angie-module-brotli angie-module-zstd

# angie.conf
cat << EOF > /etc/angie/angie.conf
user  angie;
worker_processes  auto;
worker_rlimit_nofile 65536;

# load modules
load_module modules/ngx_http_brotli_filter_module.so;
load_module modules/ngx_http_brotli_static_module.so;

error_log  /var/log/angie/error.log notice;
pid        /run/angie.pid;

events {
    worker_connections  65536;
}

http {
    include       /etc/angie/mime.types;
    default_type  application/octet-stream;

    log_format main     '$time_iso8601 $remote_addr $http_x_forwarded_for "$request" $status $body_bytes_sent '
                        '"$http_referer" "$http_user_agent" $upstream_addr $upstream_response_time $request_time';

    log_format extended '$time_iso8601 $remote_addr $http_x_forwarded_for "$request" $status $body_bytes_sent  '
                        '"$http_referer" "$http_user_agent" $upstream_addr $upstream_status $upstream_cache_status '
                        '$upstream_connect_time $upstream_response_time $request_time';

    access_log  /var/log/angie/access.log  main;

    server_tokens   off;
    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;
    # brotli
    brotli on;
    brotli_comp_level 4;
    brotli_static on;
    brotli_types application/atom+xml application/javascript application/json application/vnd.api+json application/rss+xml
                 application/vnd.ms-fontobject application/x-font-opentype application/x-font-truetype
                 application/x-font-ttf application/x-javascript application/xhtml+xml application/xml
                 font/eot font/opentype font/otf font/truetype image/svg+xml image/vnd.microsoft.icon
                 image/x-icon image/x-win-bitmap text/css text/javascript text/plain text/xml;

    # prometheus
    include prometheus_all.conf;

    server {
        listen 6600;

        location =/p8s {
            prometheus all;
        }

        access_log off;
    }

    include /etc/angie/http.d/*.conf;
}

#stream {
#    include /etc/angie/stream.d/*.conf;
#}

EOF

# angie logrotate
cat << EOF > /etc/logrotate.d/angie
/var/log/angie/*.log {
    daily
    missingok
    rotate 30
    dateext
    dateyesterday 
    compress
    delaycompress
    notifempty
    sharedscripts
    postrotate
        if [ -f /run/angie.pid ]; then
            kill -USR1 $(cat /run/angie.pid)
        fi
    endscript
}
EOF

# angie cron
cat << EOF > /etc/cron.d/angie
0 0 * * * root /usr/sbin/logrotate -f /etc/logrotate.d/angie >/dev/null 2>&1
EOF

# 
systemctl enable --now angie
systemctl restart angie
```

## Network
> disable dns
```bash
# /etc/network/interfaces 
iface ens192 inet static
	address 192.168.100.100/24
	gateway 192.168.100.1
	# dns-* options are implemented by the resolvconf package, if installed
	dns-nameservers 0.0.0.0

systemctl restart networking

# 
```

server {
    listen 80;
    server_name localhost;

    root /data/web/bb-admin-frontend;
    index index.html;

    # Serve static files and index
    location / {
        try_files $uri $uri/ /index.html;
    }

    # Proxy API requests to backend service on port 7555
    location /api/ {
        # Rewrite rule to strip the /api prefix from requests
        rewrite ^/api(/.*)$ $1 break;

        proxy_pass http://localhost:7555;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }

    # Proxy WebSocket requests to backend service on port 7565
    location /socket/ {
        proxy_pass http://localhost:7565;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'Origin, X-Requested-With, Content-Type, Accept, Authorization';
        
        if ($request_method = OPTIONS) {
            return 204;
        }
    }
}